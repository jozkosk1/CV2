
CV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000534  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000670  08000678  00010678  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000670  08000670  00010670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000674  08000674  00010674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010678  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  08000678  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000001c  08000678  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00010678  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001b5a  00000000  00000000  000106a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000006c8  00000000  00000000  000121fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000002b8  00000000  00000000  000128c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  00012b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000efc  00000000  00000000  00012de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000bec  00000000  00000000  00013cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  000148c8  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000a48  00000000  00000000  00014948  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00015390  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000000 	.word	0x20000000
 8000158:	00000000 	.word	0x00000000
 800015c:	08000658 	.word	0x08000658

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000004 	.word	0x20000004
 8000178:	08000658 	.word	0x08000658

0800017c <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800017c:	b480      	push	{r7}
 800017e:	b087      	sub	sp, #28
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000186:	2300      	movs	r3, #0
 8000188:	617b      	str	r3, [r7, #20]
 800018a:	2300      	movs	r3, #0
 800018c:	613b      	str	r3, [r7, #16]
 800018e:	2300      	movs	r3, #0
 8000190:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000192:	2300      	movs	r3, #0
 8000194:	617b      	str	r3, [r7, #20]
 8000196:	e07e      	b.n	8000296 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000198:	2201      	movs	r2, #1
 800019a:	697b      	ldr	r3, [r7, #20]
 800019c:	fa02 f303 	lsl.w	r3, r2, r3
 80001a0:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001a2:	683b      	ldr	r3, [r7, #0]
 80001a4:	681a      	ldr	r2, [r3, #0]
 80001a6:	693b      	ldr	r3, [r7, #16]
 80001a8:	4013      	ands	r3, r2
 80001aa:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80001ac:	68fa      	ldr	r2, [r7, #12]
 80001ae:	693b      	ldr	r3, [r7, #16]
 80001b0:	429a      	cmp	r2, r3
 80001b2:	d16d      	bne.n	8000290 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	681a      	ldr	r2, [r3, #0]
 80001b8:	697b      	ldr	r3, [r7, #20]
 80001ba:	005b      	lsls	r3, r3, #1
 80001bc:	2103      	movs	r1, #3
 80001be:	fa01 f303 	lsl.w	r3, r1, r3
 80001c2:	43db      	mvns	r3, r3
 80001c4:	401a      	ands	r2, r3
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	681a      	ldr	r2, [r3, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]
 80001d0:	791b      	ldrb	r3, [r3, #4]
 80001d2:	4619      	mov	r1, r3
 80001d4:	697b      	ldr	r3, [r7, #20]
 80001d6:	005b      	lsls	r3, r3, #1
 80001d8:	fa01 f303 	lsl.w	r3, r1, r3
 80001dc:	431a      	orrs	r2, r3
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	791b      	ldrb	r3, [r3, #4]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d003      	beq.n	80001f2 <GPIO_Init+0x76>
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	791b      	ldrb	r3, [r3, #4]
 80001ee:	2b02      	cmp	r3, #2
 80001f0:	d136      	bne.n	8000260 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	689a      	ldr	r2, [r3, #8]
 80001f6:	697b      	ldr	r3, [r7, #20]
 80001f8:	005b      	lsls	r3, r3, #1
 80001fa:	2103      	movs	r1, #3
 80001fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000200:	43db      	mvns	r3, r3
 8000202:	401a      	ands	r2, r3
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	689a      	ldr	r2, [r3, #8]
 800020c:	683b      	ldr	r3, [r7, #0]
 800020e:	795b      	ldrb	r3, [r3, #5]
 8000210:	4619      	mov	r1, r3
 8000212:	697b      	ldr	r3, [r7, #20]
 8000214:	005b      	lsls	r3, r3, #1
 8000216:	fa01 f303 	lsl.w	r3, r1, r3
 800021a:	431a      	orrs	r2, r3
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	889b      	ldrh	r3, [r3, #4]
 8000224:	b29a      	uxth	r2, r3
 8000226:	697b      	ldr	r3, [r7, #20]
 8000228:	b29b      	uxth	r3, r3
 800022a:	2101      	movs	r1, #1
 800022c:	fa01 f303 	lsl.w	r3, r1, r3
 8000230:	b29b      	uxth	r3, r3
 8000232:	43db      	mvns	r3, r3
 8000234:	b29b      	uxth	r3, r3
 8000236:	4013      	ands	r3, r2
 8000238:	b29a      	uxth	r2, r3
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	889b      	ldrh	r3, [r3, #4]
 8000242:	b29b      	uxth	r3, r3
 8000244:	b21a      	sxth	r2, r3
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	799b      	ldrb	r3, [r3, #6]
 800024a:	4619      	mov	r1, r3
 800024c:	697b      	ldr	r3, [r7, #20]
 800024e:	b29b      	uxth	r3, r3
 8000250:	fa01 f303 	lsl.w	r3, r1, r3
 8000254:	b21b      	sxth	r3, r3
 8000256:	4313      	orrs	r3, r2
 8000258:	b21b      	sxth	r3, r3
 800025a:	b29a      	uxth	r2, r3
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	68da      	ldr	r2, [r3, #12]
 8000264:	697b      	ldr	r3, [r7, #20]
 8000266:	b29b      	uxth	r3, r3
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	2103      	movs	r1, #3
 800026c:	fa01 f303 	lsl.w	r3, r1, r3
 8000270:	43db      	mvns	r3, r3
 8000272:	401a      	ands	r2, r3
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	68da      	ldr	r2, [r3, #12]
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	79db      	ldrb	r3, [r3, #7]
 8000280:	4619      	mov	r1, r3
 8000282:	697b      	ldr	r3, [r7, #20]
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	fa01 f303 	lsl.w	r3, r1, r3
 800028a:	431a      	orrs	r2, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000290:	697b      	ldr	r3, [r7, #20]
 8000292:	3301      	adds	r3, #1
 8000294:	617b      	str	r3, [r7, #20]
 8000296:	697b      	ldr	r3, [r7, #20]
 8000298:	2b0f      	cmp	r3, #15
 800029a:	f67f af7d 	bls.w	8000198 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800029e:	bf00      	nop
 80002a0:	371c      	adds	r7, #28
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr

080002a8 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	460b      	mov	r3, r1
 80002b2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80002b4:	2300      	movs	r3, #0
 80002b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	8a1b      	ldrh	r3, [r3, #16]
 80002bc:	b29a      	uxth	r2, r3
 80002be:	887b      	ldrh	r3, [r7, #2]
 80002c0:	4013      	ands	r3, r2
 80002c2:	b29b      	uxth	r3, r3
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d002      	beq.n	80002ce <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 80002c8:	2301      	movs	r3, #1
 80002ca:	73fb      	strb	r3, [r7, #15]
 80002cc:	e001      	b.n	80002d2 <GPIO_ReadInputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80002ce:	2300      	movs	r3, #0
 80002d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80002d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	3714      	adds	r7, #20
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	460b      	mov	r3, r1
 80002ea:	807b      	strh	r3, [r7, #2]
 80002ec:	4613      	mov	r3, r2
 80002ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 80002f0:	787b      	ldrb	r3, [r7, #1]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d003      	beq.n	80002fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	887a      	ldrh	r2, [r7, #2]
 80002fa:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 80002fc:	e002      	b.n	8000304 <GPIO_WriteBit+0x24>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	887a      	ldrh	r2, [r7, #2]
 8000302:	835a      	strh	r2, [r3, #26]
  }
}
 8000304:	bf00      	nop
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	bc80      	pop	{r7}
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	460b      	mov	r3, r1
 800031a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800031c:	78fb      	ldrb	r3, [r7, #3]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d006      	beq.n	8000330 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000322:	4909      	ldr	r1, [pc, #36]	; (8000348 <RCC_AHBPeriphClockCmd+0x38>)
 8000324:	4b08      	ldr	r3, [pc, #32]	; (8000348 <RCC_AHBPeriphClockCmd+0x38>)
 8000326:	69da      	ldr	r2, [r3, #28]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4313      	orrs	r3, r2
 800032c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 800032e:	e006      	b.n	800033e <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000330:	4905      	ldr	r1, [pc, #20]	; (8000348 <RCC_AHBPeriphClockCmd+0x38>)
 8000332:	4b05      	ldr	r3, [pc, #20]	; (8000348 <RCC_AHBPeriphClockCmd+0x38>)
 8000334:	69da      	ldr	r2, [r3, #28]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	43db      	mvns	r3, r3
 800033a:	4013      	ands	r3, r2
 800033c:	61cb      	str	r3, [r1, #28]
  }
}
 800033e:	bf00      	nop
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr
 8000348:	40023800 	.word	0x40023800

0800034c <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000352:	2101      	movs	r1, #1
 8000354:	2001      	movs	r0, #1
 8000356:	f7ff ffdb 	bl	8000310 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_5;
 800035a:	2320      	movs	r3, #32
 800035c:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800035e:	2301      	movs	r3, #1
 8000360:	723b      	strb	r3, [r7, #8]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000362:	2300      	movs	r3, #0
 8000364:	72bb      	strb	r3, [r7, #10]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000366:	2301      	movs	r3, #1
 8000368:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 800036a:	2303      	movs	r3, #3
 800036c:	727b      	strb	r3, [r7, #9]

	GPIO_Init (GPIOA, &GPIO_InitStructure);
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	4619      	mov	r1, r3
 8000372:	4816      	ldr	r0, [pc, #88]	; (80003cc <main+0x80>)
 8000374:	f7ff ff02 	bl	800017c <GPIO_Init>


	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8000378:	2101      	movs	r1, #1
 800037a:	2004      	movs	r0, #4
 800037c:	f7ff ffc8 	bl	8000310 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_13;
 8000380:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000384:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000386:	2300      	movs	r3, #0
 8000388:	723b      	strb	r3, [r7, #8]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800038a:	2300      	movs	r3, #0
 800038c:	72bb      	strb	r3, [r7, #10]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800038e:	2300      	movs	r3, #0
 8000390:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8000392:	2303      	movs	r3, #3
 8000394:	727b      	strb	r3, [r7, #9]

	GPIO_Init (GPIOC, &GPIO_InitStructure);
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	4619      	mov	r1, r3
 800039a:	480d      	ldr	r0, [pc, #52]	; (80003d0 <main+0x84>)
 800039c:	f7ff feee 	bl	800017c <GPIO_Init>

  /* Infinite loop */
  while (1)
  {

	  i=GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13);
 80003a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a4:	480a      	ldr	r0, [pc, #40]	; (80003d0 <main+0x84>)
 80003a6:	f7ff ff7f 	bl	80002a8 <GPIO_ReadInputDataBit>
 80003aa:	4603      	mov	r3, r0
 80003ac:	73fb      	strb	r3, [r7, #15]
	  if (i==0)
 80003ae:	7bfb      	ldrb	r3, [r7, #15]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d105      	bne.n	80003c0 <main+0x74>
		  	  GPIO_WriteBit(GPIOA, GPIO_Pin_5, 1);
 80003b4:	2201      	movs	r2, #1
 80003b6:	2120      	movs	r1, #32
 80003b8:	4804      	ldr	r0, [pc, #16]	; (80003cc <main+0x80>)
 80003ba:	f7ff ff91 	bl	80002e0 <GPIO_WriteBit>
 80003be:	e7ef      	b.n	80003a0 <main+0x54>
	  else
		  GPIO_WriteBit(GPIOA, GPIO_Pin_5, 0);
 80003c0:	2200      	movs	r2, #0
 80003c2:	2120      	movs	r1, #32
 80003c4:	4801      	ldr	r0, [pc, #4]	; (80003cc <main+0x80>)
 80003c6:	f7ff ff8b 	bl	80002e0 <GPIO_WriteBit>
  }
 80003ca:	e7e9      	b.n	80003a0 <main+0x54>
 80003cc:	40020000 	.word	0x40020000
 80003d0:	40020800 	.word	0x40020800

080003d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800040c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80003d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80003da:	e003      	b.n	80003e4 <LoopCopyDataInit>

080003dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80003dc:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 80003de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80003e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80003e2:	3104      	adds	r1, #4

080003e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80003e4:	480b      	ldr	r0, [pc, #44]	; (8000414 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 80003e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80003ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80003ec:	d3f6      	bcc.n	80003dc <CopyDataInit>
  ldr r2, =_sbss
 80003ee:	4a0b      	ldr	r2, [pc, #44]	; (800041c <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 80003f0:	e002      	b.n	80003f8 <LoopFillZerobss>

080003f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80003f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80003f4:	f842 3b04 	str.w	r3, [r2], #4

080003f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80003f8:	4b09      	ldr	r3, [pc, #36]	; (8000420 <LoopFillZerobss+0x28>)
  cmp r2, r3
 80003fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80003fc:	d3f9      	bcc.n	80003f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003fe:	f000 f841 	bl	8000484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000402:	f000 f903 	bl	800060c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000406:	f7ff ffa1 	bl	800034c <main>
  bx lr
 800040a:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800040c:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000410:	08000678 	.word	0x08000678
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000414:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000418:	20000000 	.word	0x20000000
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 800041c:	20000000 	.word	0x20000000
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000420:	2000001c 	.word	0x2000001c

08000424 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000424:	e7fe      	b.n	8000424 <ADC1_IRQHandler>
	...

08000428 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr

08000434 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000438:	e7fe      	b.n	8000438 <HardFault_Handler+0x4>
 800043a:	bf00      	nop

0800043c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000440:	e7fe      	b.n	8000440 <MemManage_Handler+0x4>
 8000442:	bf00      	nop

08000444 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000448:	e7fe      	b.n	8000448 <BusFault_Handler+0x4>
 800044a:	bf00      	nop

0800044c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000450:	e7fe      	b.n	8000450 <UsageFault_Handler+0x4>
 8000452:	bf00      	nop

08000454 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr

0800046c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr

08000478 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr

08000484 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000488:	4a15      	ldr	r2, [pc, #84]	; (80004e0 <SystemInit+0x5c>)
 800048a:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <SystemInit+0x5c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000492:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000494:	4912      	ldr	r1, [pc, #72]	; (80004e0 <SystemInit+0x5c>)
 8000496:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <SystemInit+0x5c>)
 8000498:	689a      	ldr	r2, [r3, #8]
 800049a:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <SystemInit+0x60>)
 800049c:	4013      	ands	r3, r2
 800049e:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80004a0:	4a0f      	ldr	r2, [pc, #60]	; (80004e0 <SystemInit+0x5c>)
 80004a2:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <SystemInit+0x5c>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80004aa:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80004ae:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004b0:	4a0b      	ldr	r2, [pc, #44]	; (80004e0 <SystemInit+0x5c>)
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <SystemInit+0x5c>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004ba:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80004bc:	4a08      	ldr	r2, [pc, #32]	; (80004e0 <SystemInit+0x5c>)
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <SystemInit+0x5c>)
 80004c0:	689b      	ldr	r3, [r3, #8]
 80004c2:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80004c6:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <SystemInit+0x5c>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 80004ce:	f000 f80d 	bl	80004ec <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <SystemInit+0x64>)
 80004d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004d8:	609a      	str	r2, [r3, #8]
#endif
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40023800 	.word	0x40023800
 80004e4:	88ffc00c 	.word	0x88ffc00c
 80004e8:	e000ed00 	.word	0xe000ed00

080004ec <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	2300      	movs	r3, #0
 80004f8:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80004fa:	4a41      	ldr	r2, [pc, #260]	; (8000600 <SetSysClock+0x114>)
 80004fc:	4b40      	ldr	r3, [pc, #256]	; (8000600 <SetSysClock+0x114>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000504:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000506:	4b3e      	ldr	r3, [pc, #248]	; (8000600 <SetSysClock+0x114>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800050e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	3301      	adds	r3, #1
 8000514:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d103      	bne.n	8000524 <SetSysClock+0x38>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000522:	d1f0      	bne.n	8000506 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000524:	4b36      	ldr	r3, [pc, #216]	; (8000600 <SetSysClock+0x114>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800052c:	2b00      	cmp	r3, #0
 800052e:	d002      	beq.n	8000536 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000530:	2301      	movs	r3, #1
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	e001      	b.n	800053a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000536:	2300      	movs	r3, #0
 8000538:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d15a      	bne.n	80005f6 <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8000540:	4a30      	ldr	r2, [pc, #192]	; (8000604 <SetSysClock+0x118>)
 8000542:	4b30      	ldr	r3, [pc, #192]	; (8000604 <SetSysClock+0x118>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f043 0304 	orr.w	r3, r3, #4
 800054a:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 800054c:	4a2d      	ldr	r2, [pc, #180]	; (8000604 <SetSysClock+0x118>)
 800054e:	4b2d      	ldr	r3, [pc, #180]	; (8000604 <SetSysClock+0x118>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f043 0302 	orr.w	r3, r3, #2
 8000556:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8000558:	4a2a      	ldr	r2, [pc, #168]	; (8000604 <SetSysClock+0x118>)
 800055a:	4b2a      	ldr	r3, [pc, #168]	; (8000604 <SetSysClock+0x118>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f043 0301 	orr.w	r3, r3, #1
 8000562:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000564:	4a26      	ldr	r2, [pc, #152]	; (8000600 <SetSysClock+0x114>)
 8000566:	4b26      	ldr	r3, [pc, #152]	; (8000600 <SetSysClock+0x114>)
 8000568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <SetSysClock+0x11c>)
 8000572:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000576:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8000578:	bf00      	nop
 800057a:	4b23      	ldr	r3, [pc, #140]	; (8000608 <SetSysClock+0x11c>)
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	f003 0310 	and.w	r3, r3, #16
 8000582:	2b00      	cmp	r3, #0
 8000584:	d1f9      	bne.n	800057a <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000586:	4a1e      	ldr	r2, [pc, #120]	; (8000600 <SetSysClock+0x114>)
 8000588:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <SetSysClock+0x114>)
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800058e:	4a1c      	ldr	r2, [pc, #112]	; (8000600 <SetSysClock+0x114>)
 8000590:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <SetSysClock+0x114>)
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8000596:	4a1a      	ldr	r2, [pc, #104]	; (8000600 <SetSysClock+0x114>)
 8000598:	4b19      	ldr	r3, [pc, #100]	; (8000600 <SetSysClock+0x114>)
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 800059e:	4a18      	ldr	r2, [pc, #96]	; (8000600 <SetSysClock+0x114>)
 80005a0:	4b17      	ldr	r3, [pc, #92]	; (8000600 <SetSysClock+0x114>)
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80005a8:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 80005aa:	4a15      	ldr	r2, [pc, #84]	; (8000600 <SetSysClock+0x114>)
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <SetSysClock+0x114>)
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 80005b4:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80005b6:	4a12      	ldr	r2, [pc, #72]	; (8000600 <SetSysClock+0x114>)
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <SetSysClock+0x114>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005c0:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80005c2:	bf00      	nop
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <SetSysClock+0x114>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d0f9      	beq.n	80005c4 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80005d0:	4a0b      	ldr	r2, [pc, #44]	; (8000600 <SetSysClock+0x114>)
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <SetSysClock+0x114>)
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	f023 0303 	bic.w	r3, r3, #3
 80005da:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80005dc:	4a08      	ldr	r2, [pc, #32]	; (8000600 <SetSysClock+0x114>)
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <SetSysClock+0x114>)
 80005e0:	689b      	ldr	r3, [r3, #8]
 80005e2:	f043 0303 	orr.w	r3, r3, #3
 80005e6:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80005e8:	bf00      	nop
 80005ea:	4b05      	ldr	r3, [pc, #20]	; (8000600 <SetSysClock+0x114>)
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	f003 030c 	and.w	r3, r3, #12
 80005f2:	2b0c      	cmp	r3, #12
 80005f4:	d1f9      	bne.n	80005ea <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	40023800 	.word	0x40023800
 8000604:	40023c00 	.word	0x40023c00
 8000608:	40007000 	.word	0x40007000

0800060c <__libc_init_array>:
 800060c:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <__libc_init_array+0x3c>)
 800060e:	b570      	push	{r4, r5, r6, lr}
 8000610:	461e      	mov	r6, r3
 8000612:	4c0e      	ldr	r4, [pc, #56]	; (800064c <__libc_init_array+0x40>)
 8000614:	2500      	movs	r5, #0
 8000616:	1ae4      	subs	r4, r4, r3
 8000618:	10a4      	asrs	r4, r4, #2
 800061a:	42a5      	cmp	r5, r4
 800061c:	d004      	beq.n	8000628 <__libc_init_array+0x1c>
 800061e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000622:	4798      	blx	r3
 8000624:	3501      	adds	r5, #1
 8000626:	e7f8      	b.n	800061a <__libc_init_array+0xe>
 8000628:	f000 f816 	bl	8000658 <_init>
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <__libc_init_array+0x44>)
 800062e:	4c09      	ldr	r4, [pc, #36]	; (8000654 <__libc_init_array+0x48>)
 8000630:	461e      	mov	r6, r3
 8000632:	1ae4      	subs	r4, r4, r3
 8000634:	10a4      	asrs	r4, r4, #2
 8000636:	2500      	movs	r5, #0
 8000638:	42a5      	cmp	r5, r4
 800063a:	d004      	beq.n	8000646 <__libc_init_array+0x3a>
 800063c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000640:	4798      	blx	r3
 8000642:	3501      	adds	r5, #1
 8000644:	e7f8      	b.n	8000638 <__libc_init_array+0x2c>
 8000646:	bd70      	pop	{r4, r5, r6, pc}
 8000648:	08000670 	.word	0x08000670
 800064c:	08000670 	.word	0x08000670
 8000650:	08000670 	.word	0x08000670
 8000654:	08000674 	.word	0x08000674

08000658 <_init>:
 8000658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800065a:	bf00      	nop
 800065c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800065e:	bc08      	pop	{r3}
 8000660:	469e      	mov	lr, r3
 8000662:	4770      	bx	lr

08000664 <_fini>:
 8000664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000666:	bf00      	nop
 8000668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800066a:	bc08      	pop	{r3}
 800066c:	469e      	mov	lr, r3
 800066e:	4770      	bx	lr
