
CV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000390  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004cc  080004d4  000104d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080004cc  080004cc  000104cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080004d0  080004d0  000104d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000104d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  080004d4  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000001c  080004d4  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000104d4  2**0
                  CONTENTS, READONLY
  9 .debug_info   000013d0  00000000  00000000  000104fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000004d8  00000000  00000000  000118cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000230  00000000  00000000  00011da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00011fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000b56  00000000  00000000  000121c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000008fd  00000000  00000000  00012d16  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00013613  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000080c  00000000  00000000  00013694  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00013ea0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000000 	.word	0x20000000
 8000158:	00000000 	.word	0x00000000
 800015c:	080004b4 	.word	0x080004b4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000004 	.word	0x20000004
 8000178:	080004b4 	.word	0x080004b4

0800017c <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 800017c:	b480      	push	{r7}
 800017e:	b083      	sub	sp, #12
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	460b      	mov	r3, r1
 8000186:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000188:	78fb      	ldrb	r3, [r7, #3]
 800018a:	2b00      	cmp	r3, #0
 800018c:	d006      	beq.n	800019c <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800018e:	4909      	ldr	r1, [pc, #36]	; (80001b4 <RCC_AHBPeriphClockCmd+0x38>)
 8000190:	4b08      	ldr	r3, [pc, #32]	; (80001b4 <RCC_AHBPeriphClockCmd+0x38>)
 8000192:	69da      	ldr	r2, [r3, #28]
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	4313      	orrs	r3, r2
 8000198:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 800019a:	e006      	b.n	80001aa <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 800019c:	4905      	ldr	r1, [pc, #20]	; (80001b4 <RCC_AHBPeriphClockCmd+0x38>)
 800019e:	4b05      	ldr	r3, [pc, #20]	; (80001b4 <RCC_AHBPeriphClockCmd+0x38>)
 80001a0:	69da      	ldr	r2, [r3, #28]
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	43db      	mvns	r3, r3
 80001a6:	4013      	ands	r3, r2
 80001a8:	61cb      	str	r3, [r1, #28]
  }
}
 80001aa:	bf00      	nop
 80001ac:	370c      	adds	r7, #12
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	40023800 	.word	0x40023800

080001b8 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80001be:	2101      	movs	r1, #1
 80001c0:	2001      	movs	r0, #1
 80001c2:	f7ff ffdb 	bl	800017c <RCC_AHBPeriphClockCmd>
  GPIOA -> MODER |= (1 << 10);		//OUT
 80001c6:	4a18      	ldr	r2, [pc, #96]	; (8000228 <main+0x70>)
 80001c8:	4b17      	ldr	r3, [pc, #92]	; (8000228 <main+0x70>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001d0:	6013      	str	r3, [r2, #0]
  GPIOA -> OSPEEDR |= (3 << 10);	//Very high speed
 80001d2:	4a15      	ldr	r2, [pc, #84]	; (8000228 <main+0x70>)
 80001d4:	4b14      	ldr	r3, [pc, #80]	; (8000228 <main+0x70>)
 80001d6:	689b      	ldr	r3, [r3, #8]
 80001d8:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80001dc:	6093      	str	r3, [r2, #8]
  GPIOA -> PUPDR |= (1 << 10);		//Pull UP
 80001de:	4a12      	ldr	r2, [pc, #72]	; (8000228 <main+0x70>)
 80001e0:	4b11      	ldr	r3, [pc, #68]	; (8000228 <main+0x70>)
 80001e2:	68db      	ldr	r3, [r3, #12]
 80001e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001e8:	60d3      	str	r3, [r2, #12]

  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 80001ea:	2101      	movs	r1, #1
 80001ec:	2004      	movs	r0, #4
 80001ee:	f7ff ffc5 	bl	800017c <RCC_AHBPeriphClockCmd>
  *  system_stm32l1xx.c file
  */

  /* TODO - Add your application code here */

  uint32_t p =0;
 80001f2:	2300      	movs	r3, #0
 80001f4:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  while (1)
  {
	  if (((GPIOC -> IDR) & (1 << 13)) == 0)
 80001f6:	4b0d      	ldr	r3, [pc, #52]	; (800022c <main+0x74>)
 80001f8:	8a1b      	ldrh	r3, [r3, #16]
 80001fa:	b29b      	uxth	r3, r3
 80001fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000200:	2b00      	cmp	r3, #0
 8000202:	d108      	bne.n	8000216 <main+0x5e>
	  {
		  GPIOA -> ODR |= (1 << 5);
 8000204:	4a08      	ldr	r2, [pc, #32]	; (8000228 <main+0x70>)
 8000206:	4b08      	ldr	r3, [pc, #32]	; (8000228 <main+0x70>)
 8000208:	8a9b      	ldrh	r3, [r3, #20]
 800020a:	b29b      	uxth	r3, r3
 800020c:	f043 0320 	orr.w	r3, r3, #32
 8000210:	b29b      	uxth	r3, r3
 8000212:	8293      	strh	r3, [r2, #20]
 8000214:	e7ef      	b.n	80001f6 <main+0x3e>
	  }
	  else
	  {
		  GPIOA -> ODR &= ~(1 << 5);
 8000216:	4a04      	ldr	r2, [pc, #16]	; (8000228 <main+0x70>)
 8000218:	4b03      	ldr	r3, [pc, #12]	; (8000228 <main+0x70>)
 800021a:	8a9b      	ldrh	r3, [r3, #20]
 800021c:	b29b      	uxth	r3, r3
 800021e:	f023 0320 	bic.w	r3, r3, #32
 8000222:	b29b      	uxth	r3, r3
 8000224:	8293      	strh	r3, [r2, #20]
	  }


  }
 8000226:	e7e6      	b.n	80001f6 <main+0x3e>
 8000228:	40020000 	.word	0x40020000
 800022c:	40020800 	.word	0x40020800

08000230 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000230:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000268 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000234:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000236:	e003      	b.n	8000240 <LoopCopyDataInit>

08000238 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000238:	4b0c      	ldr	r3, [pc, #48]	; (800026c <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 800023a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800023c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800023e:	3104      	adds	r1, #4

08000240 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000240:	480b      	ldr	r0, [pc, #44]	; (8000270 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 8000242:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8000244:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000246:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000248:	d3f6      	bcc.n	8000238 <CopyDataInit>
  ldr r2, =_sbss
 800024a:	4a0b      	ldr	r2, [pc, #44]	; (8000278 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 800024c:	e002      	b.n	8000254 <LoopFillZerobss>

0800024e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800024e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000250:	f842 3b04 	str.w	r3, [r2], #4

08000254 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000254:	4b09      	ldr	r3, [pc, #36]	; (800027c <LoopFillZerobss+0x28>)
  cmp r2, r3
 8000256:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000258:	d3f9      	bcc.n	800024e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800025a:	f000 f841 	bl	80002e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800025e:	f000 f903 	bl	8000468 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000262:	f7ff ffa9 	bl	80001b8 <main>
  bx lr
 8000266:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000268:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 800026c:	080004d4 	.word	0x080004d4
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000270:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000274:	20000000 	.word	0x20000000
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8000278:	20000000 	.word	0x20000000
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 800027c:	2000001c 	.word	0x2000001c

08000280 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000280:	e7fe      	b.n	8000280 <ADC1_IRQHandler>
	...

08000284 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr

08000290 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000294:	e7fe      	b.n	8000294 <HardFault_Handler+0x4>
 8000296:	bf00      	nop

08000298 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 800029c:	e7fe      	b.n	800029c <MemManage_Handler+0x4>
 800029e:	bf00      	nop

080002a0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80002a4:	e7fe      	b.n	80002a4 <BusFault_Handler+0x4>
 80002a6:	bf00      	nop

080002a8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80002ac:	e7fe      	b.n	80002ac <UsageFault_Handler+0x4>
 80002ae:	bf00      	nop

080002b0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr

080002bc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr

080002c8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr

080002d4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr

080002e0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80002e4:	4a15      	ldr	r2, [pc, #84]	; (800033c <SystemInit+0x5c>)
 80002e6:	4b15      	ldr	r3, [pc, #84]	; (800033c <SystemInit+0x5c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ee:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80002f0:	4912      	ldr	r1, [pc, #72]	; (800033c <SystemInit+0x5c>)
 80002f2:	4b12      	ldr	r3, [pc, #72]	; (800033c <SystemInit+0x5c>)
 80002f4:	689a      	ldr	r2, [r3, #8]
 80002f6:	4b12      	ldr	r3, [pc, #72]	; (8000340 <SystemInit+0x60>)
 80002f8:	4013      	ands	r3, r2
 80002fa:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80002fc:	4a0f      	ldr	r2, [pc, #60]	; (800033c <SystemInit+0x5c>)
 80002fe:	4b0f      	ldr	r3, [pc, #60]	; (800033c <SystemInit+0x5c>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000306:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800030a:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800030c:	4a0b      	ldr	r2, [pc, #44]	; (800033c <SystemInit+0x5c>)
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <SystemInit+0x5c>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000316:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000318:	4a08      	ldr	r2, [pc, #32]	; (800033c <SystemInit+0x5c>)
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <SystemInit+0x5c>)
 800031c:	689b      	ldr	r3, [r3, #8]
 800031e:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000322:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <SystemInit+0x5c>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 800032a:	f000 f80d 	bl	8000348 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800032e:	4b05      	ldr	r3, [pc, #20]	; (8000344 <SystemInit+0x64>)
 8000330:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000334:	609a      	str	r2, [r3, #8]
#endif
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40023800 	.word	0x40023800
 8000340:	88ffc00c 	.word	0x88ffc00c
 8000344:	e000ed00 	.word	0xe000ed00

08000348 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800034e:	2300      	movs	r3, #0
 8000350:	607b      	str	r3, [r7, #4]
 8000352:	2300      	movs	r3, #0
 8000354:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000356:	4a41      	ldr	r2, [pc, #260]	; (800045c <SetSysClock+0x114>)
 8000358:	4b40      	ldr	r3, [pc, #256]	; (800045c <SetSysClock+0x114>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000360:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000362:	4b3e      	ldr	r3, [pc, #248]	; (800045c <SetSysClock+0x114>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800036a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3301      	adds	r3, #1
 8000370:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d103      	bne.n	8000380 <SetSysClock+0x38>
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800037e:	d1f0      	bne.n	8000362 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000380:	4b36      	ldr	r3, [pc, #216]	; (800045c <SetSysClock+0x114>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000388:	2b00      	cmp	r3, #0
 800038a:	d002      	beq.n	8000392 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800038c:	2301      	movs	r3, #1
 800038e:	603b      	str	r3, [r7, #0]
 8000390:	e001      	b.n	8000396 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000392:	2300      	movs	r3, #0
 8000394:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	2b01      	cmp	r3, #1
 800039a:	d15a      	bne.n	8000452 <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 800039c:	4a30      	ldr	r2, [pc, #192]	; (8000460 <SetSysClock+0x118>)
 800039e:	4b30      	ldr	r3, [pc, #192]	; (8000460 <SetSysClock+0x118>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f043 0304 	orr.w	r3, r3, #4
 80003a6:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 80003a8:	4a2d      	ldr	r2, [pc, #180]	; (8000460 <SetSysClock+0x118>)
 80003aa:	4b2d      	ldr	r3, [pc, #180]	; (8000460 <SetSysClock+0x118>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f043 0302 	orr.w	r3, r3, #2
 80003b2:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 80003b4:	4a2a      	ldr	r2, [pc, #168]	; (8000460 <SetSysClock+0x118>)
 80003b6:	4b2a      	ldr	r3, [pc, #168]	; (8000460 <SetSysClock+0x118>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f043 0301 	orr.w	r3, r3, #1
 80003be:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003c0:	4a26      	ldr	r2, [pc, #152]	; (800045c <SetSysClock+0x114>)
 80003c2:	4b26      	ldr	r3, [pc, #152]	; (800045c <SetSysClock+0x114>)
 80003c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ca:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 80003cc:	4b25      	ldr	r3, [pc, #148]	; (8000464 <SetSysClock+0x11c>)
 80003ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80003d2:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 80003d4:	bf00      	nop
 80003d6:	4b23      	ldr	r3, [pc, #140]	; (8000464 <SetSysClock+0x11c>)
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	f003 0310 	and.w	r3, r3, #16
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d1f9      	bne.n	80003d6 <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80003e2:	4a1e      	ldr	r2, [pc, #120]	; (800045c <SetSysClock+0x114>)
 80003e4:	4b1d      	ldr	r3, [pc, #116]	; (800045c <SetSysClock+0x114>)
 80003e6:	689b      	ldr	r3, [r3, #8]
 80003e8:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80003ea:	4a1c      	ldr	r2, [pc, #112]	; (800045c <SetSysClock+0x114>)
 80003ec:	4b1b      	ldr	r3, [pc, #108]	; (800045c <SetSysClock+0x114>)
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 80003f2:	4a1a      	ldr	r2, [pc, #104]	; (800045c <SetSysClock+0x114>)
 80003f4:	4b19      	ldr	r3, [pc, #100]	; (800045c <SetSysClock+0x114>)
 80003f6:	689b      	ldr	r3, [r3, #8]
 80003f8:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 80003fa:	4a18      	ldr	r2, [pc, #96]	; (800045c <SetSysClock+0x114>)
 80003fc:	4b17      	ldr	r3, [pc, #92]	; (800045c <SetSysClock+0x114>)
 80003fe:	689b      	ldr	r3, [r3, #8]
 8000400:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000404:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8000406:	4a15      	ldr	r2, [pc, #84]	; (800045c <SetSysClock+0x114>)
 8000408:	4b14      	ldr	r3, [pc, #80]	; (800045c <SetSysClock+0x114>)
 800040a:	689b      	ldr	r3, [r3, #8]
 800040c:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8000410:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000412:	4a12      	ldr	r2, [pc, #72]	; (800045c <SetSysClock+0x114>)
 8000414:	4b11      	ldr	r3, [pc, #68]	; (800045c <SetSysClock+0x114>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800041c:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800041e:	bf00      	nop
 8000420:	4b0e      	ldr	r3, [pc, #56]	; (800045c <SetSysClock+0x114>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000428:	2b00      	cmp	r3, #0
 800042a:	d0f9      	beq.n	8000420 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800042c:	4a0b      	ldr	r2, [pc, #44]	; (800045c <SetSysClock+0x114>)
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <SetSysClock+0x114>)
 8000430:	689b      	ldr	r3, [r3, #8]
 8000432:	f023 0303 	bic.w	r3, r3, #3
 8000436:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8000438:	4a08      	ldr	r2, [pc, #32]	; (800045c <SetSysClock+0x114>)
 800043a:	4b08      	ldr	r3, [pc, #32]	; (800045c <SetSysClock+0x114>)
 800043c:	689b      	ldr	r3, [r3, #8]
 800043e:	f043 0303 	orr.w	r3, r3, #3
 8000442:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000444:	bf00      	nop
 8000446:	4b05      	ldr	r3, [pc, #20]	; (800045c <SetSysClock+0x114>)
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	f003 030c 	and.w	r3, r3, #12
 800044e:	2b0c      	cmp	r3, #12
 8000450:	d1f9      	bne.n	8000446 <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr
 800045c:	40023800 	.word	0x40023800
 8000460:	40023c00 	.word	0x40023c00
 8000464:	40007000 	.word	0x40007000

08000468 <__libc_init_array>:
 8000468:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <__libc_init_array+0x3c>)
 800046a:	b570      	push	{r4, r5, r6, lr}
 800046c:	461e      	mov	r6, r3
 800046e:	4c0e      	ldr	r4, [pc, #56]	; (80004a8 <__libc_init_array+0x40>)
 8000470:	2500      	movs	r5, #0
 8000472:	1ae4      	subs	r4, r4, r3
 8000474:	10a4      	asrs	r4, r4, #2
 8000476:	42a5      	cmp	r5, r4
 8000478:	d004      	beq.n	8000484 <__libc_init_array+0x1c>
 800047a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800047e:	4798      	blx	r3
 8000480:	3501      	adds	r5, #1
 8000482:	e7f8      	b.n	8000476 <__libc_init_array+0xe>
 8000484:	f000 f816 	bl	80004b4 <_init>
 8000488:	4b08      	ldr	r3, [pc, #32]	; (80004ac <__libc_init_array+0x44>)
 800048a:	4c09      	ldr	r4, [pc, #36]	; (80004b0 <__libc_init_array+0x48>)
 800048c:	461e      	mov	r6, r3
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	10a4      	asrs	r4, r4, #2
 8000492:	2500      	movs	r5, #0
 8000494:	42a5      	cmp	r5, r4
 8000496:	d004      	beq.n	80004a2 <__libc_init_array+0x3a>
 8000498:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800049c:	4798      	blx	r3
 800049e:	3501      	adds	r5, #1
 80004a0:	e7f8      	b.n	8000494 <__libc_init_array+0x2c>
 80004a2:	bd70      	pop	{r4, r5, r6, pc}
 80004a4:	080004cc 	.word	0x080004cc
 80004a8:	080004cc 	.word	0x080004cc
 80004ac:	080004cc 	.word	0x080004cc
 80004b0:	080004d0 	.word	0x080004d0

080004b4 <_init>:
 80004b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b6:	bf00      	nop
 80004b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ba:	bc08      	pop	{r3}
 80004bc:	469e      	mov	lr, r3
 80004be:	4770      	bx	lr

080004c0 <_fini>:
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c2:	bf00      	nop
 80004c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c6:	bc08      	pop	{r3}
 80004c8:	469e      	mov	lr, r3
 80004ca:	4770      	bx	lr
